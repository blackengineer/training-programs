// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// prisma/schema.prisma
datasource db {
  provider  = "mysql"
  url  	    = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  courses     Course[]
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  caloriesBurned String? @db.Text
  averageHeartRate String? @db.Text
  heartRateRange String? @db.Text
  sessionLength String? @db.Text

  movementOneName String? @db.Text
  movementOneVideoUrl String? @db.Text
  movementOneSets String? @db.Text
  movementOneReps String? @db.Text
  movementOneTempo String? @db.Text
  movementOneRest String? @db.Text

  movementTwoName String? @db.Text
  movementTwoVideoUrl String? @db.Text
  movementTwoSets String? @db.Text
  movementTwoReps String? @db.Text
  movementTwoTempo String? @db.Text
  movementTwoRest String? @db.Text

  movementThreeName String? @db.Text
  movementThreeVideoUrl String? @db.Text
  movementThreeSets String? @db.Text
  movementThreeReps String? @db.Text
  movementThreeTempo String? @db.Text
  movementThreeRest String? @db.Text

  movementFourName String? @db.Text
  movementFourVideoUrl String? @db.Text
  movementFourSets String? @db.Text
  movementFourReps String? @db.Text
  movementFourTempo String? @db.Text
  movementFourRest String? @db.Text

  movementFiveName String? @db.Text
  movementFiveVideoUrl String? @db.Text
  movementFiveSets String? @db.Text
  movementFiveReps String? @db.Text
  movementFiveTempo String? @db.Text
  movementFiveRest String? @db.Text

  movementSixName String? @db.Text
  movementSixVideoUrl String? @db.Text
  movementSixSets String? @db.Text
  movementSixReps String? @db.Text
  movementSixTempo String? @db.Text
  movementSixRest String? @db.Text

  movementSevenName String? @db.Text
  movementSevenVideoUrl String? @db.Text
  movementSevenSets String? @db.Text
  movementSevenReps String? @db.Text
  movementSevenTempo String? @db.Text
  movementSevenRest String? @db.Text

  movementEightName String? @db.Text
  movementEightVideoUrl String? @db.Text
  movementEightSets String? @db.Text
  movementEightReps String? @db.Text
  movementEightTempo String? @db.Text
  movementEightRest String? @db.Text

  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model UserProgress {
  id String @id @default(uuid())
  userId String
  
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

